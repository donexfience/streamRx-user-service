// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v5.29.1
// source: user.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { SocialLink } from "src/domain/interfaces/user.interface";

export const protobufPackage = "user_service";

export interface User {
  id: string;
  email: string;
  hashedPassword: string;
  role: string;
  bio: string;
  isVerified: boolean;
  profileImageUrl: string;
  isActive: boolean;
  phoneNumber: string;
  dateOfBirth?: string;
  username: string;
  social_links:SocialLink[]
  google_id:string
  tags:[]
}

export interface CreateUserRequest {
  user?: User | undefined;
}

export interface CreateUserResponse {
  success: boolean;
  message: string;
}

export const USER_SERVICE_PACKAGE_NAME = "user_service";

export interface UserServiceClient {
  createUser(request: CreateUserRequest, metadata?: Metadata): Observable<CreateUserResponse>;
}

export interface UserServiceController {
  createUser(
    request: CreateUserRequest,
    metadata?: Metadata,
  ): Promise<CreateUserResponse> | Observable<CreateUserResponse> | CreateUserResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createUser"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
